/// dotnet Report Builder view model v4.2.3
/// License has to be purchased for use
/// 2018-2021 (c) www.dotnetreport.com

function pagerViewModel(e) { e = e || {}; var o = this; o.pageSize = ko.observable(e.pageSize || 30), o.pages = ko.observable(e.pages || 1), o.currentPage = ko.observable(e.currentPage || 1), o.pauseNavigation = ko.observable(!1), o.totalRecords = ko.observable(0), o.sortColumn = ko.observable(), o.sortDescending = ko.observable(), o.isFirstPage = ko.computed(function () { return 1 == this.currentPage() }, o), o.isLastPage = ko.computed(function () { return this.currentPage() == this.pages() }, o), o.currentPage.subscribe(function (e) { e > o.pages() && o.currentPage(0 == o.pages() ? 1 : o.pages()), e < 1 && o.currentPage(1) }), o.previous = function () { o.pauseNavigation() || o.isFirstPage() || isNaN(o.currentPage()) || o.currentPage(Number(o.currentPage()) - 1) }, o.next = function () { o.pauseNavigation() || o.isLastPage() || isNaN(o.currentPage()) || o.currentPage(Number(o.currentPage()) + 1) }, o.first = function () { o.pauseNavigation() || o.currentPage(1) }, o.last = function () { o.pauseNavigation() || o.currentPage(o.pages()) }, o.changeSort = function (e) { o.sortColumn() == e ? o.sortDescending(!o.sortDescending()) : o.sortDescending(!1), o.sortColumn(e), 1 != o.currentPage() && o.currentPage(1) } } function formulaFieldViewModel(e) { e = e || {}; this.fieldId = ko.observable(e.fieldId), this.isParenthesesStart = ko.observable(e.isParenthesesStart), this.isParenthesesEnd = ko.observable(e.isParenthesesEnd), this.formulaOperation = ko.observable(e.formulaOperation), this.isConstantValue = ko.observable(!!e.constantValue), this.constantValue = ko.observable(e.constantValue) } function linkFieldViewModel(e, o) { e = e || {}; var r = this, t = !0; r.linkTypes = ["Report", "URL"], r.selectedLinkType = ko.observable(e.LinksToReport ? "Report" : "URL"), r.allFields = ko.observableArray([]), r.LinksToReport = ko.observable(e.LinksToReport || !1), r.LinkedToReportId = ko.observable(), r.SendAsFilterParameter = ko.observable(e.SendAsFilterParameter || !1), r.SelectedFilterId = ko.observable(e.SelectedFilterId), r.LinkToUrl = ko.observable(e.LinkToUrl), r.SendAsQueryParameter = ko.observable(e.SendAsQueryParameter || !1), r.QueryParameterName = ko.observable(e.QueryParameterName), r.toJs = function () { return { LinksToReport: r.LinksToReport(), LinkedToReportId: r.LinkedToReportId(), SendAsFilterParameter: r.SendAsFilterParameter(), SelectedFilterId: r.SelectedFilterId(), LinkToUrl: r.LinkToUrl(), SendAsQueryParameter: r.SendAsQueryParameter(), QueryParameterName: r.QueryParameterName() } }, r.selectedLinkType.subscribe(function () { r.LinksToReport("Report" == r.selectedLinkType()) }), r.LinkedToReportId.subscribe(function (a) { if (a) return ajaxcall({ url: o.apiUrl, data: { method: "/ReportApi/LoadReport", model: JSON.stringify({ reportId: a }) } }).done(function (o) { r.allFields(o.SelectedFields), t && r.LinksToReport() && (r.SelectedFilterId(e.SelectedFilterId), t = !1) }) }), r.LinksToReport() && r.LinkedToReportId(e.LinkedToReportId), r.isInputValid = function (e) { return (null == $(e).attr("data-notempty") || 0 != $(e).children("option").length) && (e.validity ? e.validity.valid : null == $(e).attr("required") || "" != $(e).val()) }, r.validateLink = function () { if (null != o.linkModal) { var e = o.linkModal.find("input,select"), t = !0; $(".needs-validation").removeClass("was-validated"); for (var a = 0; a < e.length; a++)$(e[a]).removeClass("is-invalid"), r.isInputValid(e[a]) || (t = !1, $(".needs-validation").addClass("was-validated"), $(e[a]).addClass("is-invalid")); return t } }, r.clear = function () { r.LinksToReport(!0), r.selectedLinkType("Report"), r.LinkedToReportId(null), r.SendAsFilterParameter(!1), r.SelectedFilterId(null), r.LinkToUrl = ko.observable(null), r.SendAsQueryParameter(!1), r.QueryParameterName(null) } } function scheduleBuilder(e) { var o = this; o.options = ["day", "week", "month", "year"], o.showAtTime = ko.observable(!0), o.showDays = ko.observable(!1), o.showMonths = ko.observable(!1), o.showDates = ko.observable(!1), o.selectedOption = ko.observable("day"), o.selectedDays = ko.observableArray([]), o.selectedMonths = ko.observableArray([]), o.selectedDates = ko.observableArray([]), o.selectedHour = ko.observable("12"), o.selectedMinute = ko.observable("00"), o.selectedAmPm = ko.observable("PM"), o.days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], o.months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], o.dates = [], o.hours = [], o.minutes = ["00", "15", "30", "45"]; for (var r = 1; r <= 31; r++)o.dates.push(r); for (r = 1; r <= 12; r++)o.hours.push(r); o.hasSchedule = ko.observable(!1), o.emailTo = ko.observable(""), o.selectedOption.subscribe(function (e) { switch (o.selectedDays([]), o.selectedMonths([]), o.selectedDates([]), e) { case "day": o.showDays(!1), o.showDates(!1), o.showMonths(!1); break; case "week": o.showDays(!0), o.showDates(!1), o.showMonths(!1); break; case "month": o.showDays(!1), o.showDates(!0), o.showMonths(!1); break; case "year": o.showDays(!1), o.showDates(!0), o.showMonths(!0) } }), o.toJs = function () { return o.hasSchedule() ? { SelectedOption: o.selectedOption(), SelectedDays: o.selectedDays().join(","), SelectedMonths: o.selectedMonths().join(","), SelectedDates: o.selectedDates().join(","), SelectedHour: o.selectedHour(), SelectedMinute: o.selectedMinute(), SelectedAmPm: o.selectedAmPm(), EmailTo: o.emailTo(), UserId: e } : null }, o.fromJs = function (e) { o.hasSchedule(!!e), e = e || { SelectedOption: "day", SelectedDays: "", SelectedMonths: "", SelectedDates: "" }, o.selectedOption(e.SelectedOption), o.selectedDays(e.SelectedDays.split(",")), o.selectedMonths(e.SelectedMonths.split(",")), o.selectedDates(_.map(e.SelectedDates.split(","), function (e) { return parseInt(e) })), o.selectedHour(e.SelectedHour || "12"), o.selectedMinute(e.SelectedMinute || "00"), o.selectedAmPm(e.SelectedAmPm || "PM"), o.emailTo(e.EmailTo || "") }, o.clear = function () { o.fromJs(null) } } function filterGroupViewModel(e) { e = e || {}; var o = this; o.isRoot = !0 === e.isRoot, o.AndOr = ko.observable(e.AndOr || " AND "), o.Filters = ko.observableArray([]), o.FilterGroups = ko.observableArray([]), o.AddFilterGroup = function (r) { var t = new filterGroupViewModel({ parent: e.parent, AndOr: r.AndOr, options: e.options }); return o.FilterGroups.push(t), t }, o.RemoveFilterGroup = function (e) { o.FilterGroups.remove(e) }, o.AddFilter = function (r, t) { r = r || {}; var a = ko.observableArray([]); r.Value1 && a.push({ id: r.Value1, text: r.Value1 }), r.Value2 && a.push({ id: r.Value2, text: r.Value2 }); var l = ko.observable(), n = "in" == r.Operator || "not in" == r.Operator ? (r.Value1 || "").split(",") : [], i = { AndOr: ko.observable(t ? " AND " : r.AndOr), Field: l, Operator: ko.observable(r.Operator), Value: ko.observable(r.Value1), Value2: ko.observable(r.Value2), ValueIn: ko.observableArray(n), LookupList: a, Apply: ko.observable(null == r.Apply || r.Apply), IsFilterOnFly: !0 === t }; l.subscribe(function (o) { o && o.hasForeignKey && ajaxcall({ url: e.options.apiUrl, data: { method: "/ReportApi/GetLookupList", model: JSON.stringify({ fieldId: o.fieldId }) } }).done(function (o) { o.d && (o = o.d), ajaxcall({ type: "POST", url: e.options.lookupListUrl, data: JSON.stringify({ lookupSql: o.sql, connectKey: o.connectKey }) }).done(function (e) { e.d && (e = e.d), a(e), n.length > 0 && (i.ValueIn(n), n = []) }) }) }), r.FieldId && l(e.parent.FindField(r.FieldId)), i.compareTo = ko.computed(function () { return l() ? _.filter(e.parent.AdditionalSeries(), function (e) { return e.Field().fieldId == l().fieldId }) : [] }), o.Filters.push(i) }, o.RemoveFilter = function (e) { o.Filters.remove(e) } } var manageAccess = function (e) { return { clientId: ko.observable(), users: _.map(e.users || [], function (e) { return { selected: ko.observable(!1), value: ko.observable(e) } }), userRoles: _.map(e.userRoles || [], function (e) { return { selected: ko.observable(!1), value: ko.observable(e) } }), viewOnlyUsers: _.map(e.users || [], function (e) { return { selected: ko.observable(!1), value: ko.observable(e) } }), viewOnlyUserRoles: _.map(e.userRoles || [], function (e) { return { selected: ko.observable(!1), value: ko.observable(e) } }), getAsList: function (e) { var o = ""; return _.forEach(e, function (e) { e.selected() && (o += (o ? "," : "") + e.value()) }), o }, setupList: function (e, o) { _.forEach(e, function (e) { o.indexOf(e.value()) >= 0 ? e.selected(!0) : e.selected(!1) }) } } }, headerDesigner = function (e) { var o = this; function r(e) { var r = o.canvas.getActiveObject(); return r && r[e] || "" } function t(e, r) { var t = o.canvas.getActiveObject(); t && (t.set(e, r).setCoords(), o.canvas.renderAll()) } o.canvas = null, o.initiated = !1, o.selectedObject = ko.observable(), o.UseReportHeader = ko.observable(!0 === e.useReportHeader), o.init = function (r) { if (!o.initiated && (o.initiated = !0, o.canvas = new fabric.Canvas(e.canvasId), !0 !== r)) { var t = o.canvas; o.objectProperties = { fontFamily: ko.observable(), fontSize: ko.observable(), fontColor: ko.observable(), fontBackcolor: ko.observable(), textAlign: ko.observable(), fontBold: ko.observable(), fontItalic: ko.observable(), fontUnderline: ko.observable() }, t.on("object:moving", function (e) { var o = e.target; o.currentHeight > o.canvas.height || o.currentWidth > o.canvas.width || (o.setCoords(), (o.getBoundingRect().top < 0 || o.getBoundingRect().left < 0) && (o.top = Math.max(o.top, o.top - o.getBoundingRect().top), o.left = Math.max(o.left, o.left - o.getBoundingRect().left)), (o.getBoundingRect().top + o.getBoundingRect().height > o.canvas.height || o.getBoundingRect().left + o.getBoundingRect().width > o.canvas.width) && (o.top = Math.min(o.top, o.canvas.height - o.getBoundingRect().height + o.top - o.getBoundingRect().top), o.left = Math.min(o.left, o.canvas.width - o.getBoundingRect().width + o.left - o.getBoundingRect().left))) }), t.on("selection:created", function (e) { o.selectedObject(e), o.objectProperties.fontFamily(o.getFontFamily()), o.objectProperties.fontBold(o.getFontBold()), o.objectProperties.fontItalic(o.getFontItalic()), o.objectProperties.fontColor(o.getFontColor()), o.objectProperties.fontUnderline(o.getFontUnderline()), o.objectProperties.textAlign(o.getTextAlign()) }), t.on("selection:cleared", function (e) { o.selectedObject(null) }) } }, o.resizeCanvas = function (r) { var t = o.canvas; null != t && ((r = isNaN(r) ? $("#" + e.canvasId).parent().parent().width() : r) > 100 && t.setWidth(r), t.renderAll()) }, o.dispose = function () { o.canvas && (o.canvas.dispose(), o.initiated = !1) }, o.saveCanvas = function () { var r = JSON.stringify(o.canvas.toJSON()); return ajaxcall({ url: e.apiUrl.replace("CallReportApi", "PostReportApi"), type: "POST", data: JSON.stringify({ method: "/ReportApi/SaveReportHeader", headerJson: r, useReportHeader: o.UseReportHeader() }) }).done(function (e) { e.d && (e = e.d), toastr.success("Report Header changes saved") }) }, o.loadCanvas = function (r) { var t = o.canvas; return ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetReportHeader", model: JSON.stringify({}) } }).done(function (e) { e.d && (e = e.d), o.UseReportHeader(e.useReportHeader), t.loadFromJSON(e.headerJson, t.renderAll.bind(t), function (e, o) { !0 === r && o.set("selectable", !1) }) }) }, o.addText = function () { o.canvas.add(new fabric.Textbox("Enter Text", { left: 50, top: 50, fontFamily: "arial", fontWeight: "", originX: "left", hasRotatingPoint: !0, centerTransform: !0, width: 300 })) }, o.addLine = function () { o.canvas.add(new fabric.Line([50, 100, 300, 100], { left: 20, top: 20, stroke: "#000000" })) }, o.uploadImage = function (e) { if (e.size > 1024e3) return toastr.error("Max file size is 1MB. Please choose a smaller image file. "), !1; var r = new FileReader; r.onload = function (e) { var r = new Image; r.src = e.target.result, r.onload = function () { var e = new fabric.Image(r); e.set({ angle: 0 }), o.canvas.centerObject(e), o.canvas.add(e), o.canvas.renderAll() } }, r.readAsDataURL(e) }, o.remove = function () { var e = o.canvas; e.remove(e.getActiveObject()) }, o.getText = function () { return r("text") }, o.setText = function (e) { t("text", e) }, o.getFontFamily = function () { return r("fontFamily").toLowerCase() }, o.setFontFamily = function (e, o) { t("fontFamily", o.currentTarget.value) }, o.getFontBold = function () { return r("fontWeight").toLowerCase() }, o.setFontBold = function (e, o) { t("fontWeight", "bold" == r("fontWeight") ? "" : "bold") }, o.getFontItalic = function () { return r("fontStyle").toLowerCase() }, o.setFontItalic = function (e, o) { t("fontStyle", "italic" == r("fontStyle") ? "" : "italic") }, o.getFontColor = function () { return r("stroke") }, o.setFontColor = function (e, o) { t("stroke", o.currentTarget.value), t("fill", o.currentTarget.value) }, o.getFontUnderline = function () { return r("underline").toLowerCase() }, o.setFontUnderline = function (e, o) { t("underline", r("underline") ? "" : "underline") }, o.getTextAlign = function () { return r("textAlign") }, o.setTextAlign = function (e, o) { t("textAlign", o.currentTarget.value.toLowerCase()) } }, reportViewModel = function (e) { var o = this; (e = e || {}).userSettings = e.userSettings || {}, e.userId = e.userSettings.currentUserId || "", e.users = e.userSettings.users, e.userRoles = e.userSettings.userRoles, o.currentUserId = e.userSettings.userId, o.currentUserRole = (e.userSettings.currentUserRoles || []).join(), o.currentUserName = e.userSettings.currentUserName, o.allowAdmin = ko.observable(e.userSettings.allowAdminMode), o.userIdForSchedule = e.userSettings.userIdForSchedule || o.currentUserId, o.ChartData = ko.observable(), o.ReportName = ko.observable(), o.ReportType = ko.observable("List"), o.ReportDescription = ko.observable(), o.FolderID = ko.observable(), o.ReportID = ko.observable(), o.Tables = ko.observableArray([]), o.Procs = ko.observableArray([]), o.SelectedTable = ko.observable(), o.SelectedProc = ko.observable(), o.ChooseFields = ko.observableArray([]), o.ChosenFields = ko.observableArray([]), o.SelectedFields = ko.observableArray([]), o.SelectFields = ko.observableArray([]), o.SelectedField = ko.observable(), o.AdditionalSeries = ko.observableArray([]), o.ReportSeries = "", o.IncludeSubTotal = ko.observable(!1), o.ShowUniqueRecords = ko.observable(!1), o.AggregateReport = ko.observable(!1), o.SortByField = ko.observable(), o.SortDesc = ko.observable(!1), o.EditFiltersOnReport = ko.observable(!1), o.UseReportHeader = ko.observable(!1), o.HideReportHeader = ko.observable(!1), o.FilterGroups = ko.observableArray(), o.FilterGroups.subscribe(function (r) { r && 0 == r.length && o.FilterGroups.push(new filterGroupViewModel({ isRoot: !0, parent: o, options: e })) }), o.addSortField = function (e, r) { var t = { sortByFieldId: ko.observable(e), sortDesc: ko.observable(!0 === r), remove: function () { o.SortFields.remove(t) } }; o.SortFields.push(t) }, o.SortFields = ko.observableArray([]), o.FilterGroups([]), o.SaveReport = ko.observable(!0), o.ShowDataWithGraph = ko.observable(!0), o.ShowOnDashboard = ko.observable(!1), o.ReportMode = ko.observable(e.reportMode || "start"), o.Folders = ko.observableArray(), o.SavedReports = ko.observableArray([]), o.SelectedFolder = ko.observable(null), o.CanSaveReports = ko.observable(!0), o.CanManageFolders = ko.observable(!0), o.CanEdit = ko.observable(!0), o.useReportHeader = ko.observable(!1), o.fieldFormatTypes = ["Auto", "Number", "Decimal", "Currency", "Percentage", "Date", "Date and Time", "Time"], o.decimalFormatTypes = ["Number", "Decimal", "Currency", "Percentage"], o.dateFormatTypes = ["Date", "Date and Time", "Time"], o.fieldAlignments = ["Auto", "Left", "Right", "Center"], o.designingHeader = ko.observable(!1), o.headerDesigner = new headerDesigner({ canvasId: e.reportHeader, apiUrl: e.apiUrl }), o.initHeaderDesigner = function () { o.headerDesigner.init(), o.headerDesigner.loadCanvas(!1), o.designingHeader(!0) }, o.ReportResult = ko.observable({ HasError: ko.observable(!1), ReportDebug: ko.observable(!1), Exception: ko.observable(), Warnings: ko.observable(), ReportSql: ko.observable(), ReportData: ko.observable(null), SubTotals: ko.observableArray([]) }), o.useStoredProc = ko.observable(!1), o.StoredProcId = ko.observable(), o.Parameters = ko.observableArray([]), o.showParameters = ko.observable(!0), o.pager = new pagerViewModel, o.currentSql = ko.observable(), o.currentConnectKey = ko.observable(), o.adminMode = ko.observable(!1), o.allExpanded = ko.observable(!1), o.x = ko.observable(0), o.y = ko.observable(0), o.width = ko.observable(3), o.height = ko.observable(2), o.useStoredProc.subscribe(function () { o.SelectedTable(null), o.SelectedProc(null), o.SelectedFields([]), o.clearReport() }), o.adminMode.subscribe(function (e) { o.LoadAllSavedReports(), e ? (o._cansavereports = o.CanSaveReports(), o.SaveReport(!0), o.CanSaveReports(!0)) : o.CanSaveReports(o._cansavereports), localStorage && localStorage.setItem("reportAdminMode", e) }), o.manageAccess = manageAccess(e), o.pager.currentPage.subscribe(function () { o.ExecuteReportQuery(o.currentSql(), o.currentConnectKey(), o.ReportSeries) }), o.pager.pageSize.subscribe(function () { o.ExecuteReportQuery(o.currentSql(), o.currentConnectKey(), o.ReportSeries) }), o.createNewReport = function () { o.clearReport(), o.ReportMode("generate") }, o.ReportType.subscribe(function (e) { "List" == e ? o.AggregateReport(!1) : o.AggregateReport(!0) }), o.setReportType = function (e) { o.ReportType(e) }, o.cancelCreateReport = function () { bootbox.confirm("Are you sure you would like to cancel editing this Report?", function (r) { r && (o.clearReport(), e.reportWizard.modal("hide"), o.ReportMode("start")) }) }, o.FlyFilters = ko.computed(function () { var e = []; return _.forEach(o.FilterGroups(), function (o) { _.forEach(o.Filters(), function (o) { o.IsFilterOnFly && e.push(o) }) }), e }), o.enabledFields = ko.computed(function () { return _.filter(o.SelectedFields(), function (e) { return !e.disabled() }) }), o.scheduleBuilder = new scheduleBuilder(o.userIdForSchedule), o.ManageFolder = { FolderName: ko.observable(), IsNew: ko.observable(!1), newFolder: function () { o.ManageFolder.IsNew(!0), o.ManageFolder.FolderName(""), $("#folderModal").modal("show") }, editFolder: function () { null != o.SelectedFolder() ? 0 != o.SelectedFolder().Id ? (o.ManageFolder.IsNew(!1), o.ManageFolder.FolderName(o.SelectedFolder().FolderName), $("#folderModal").modal("show")) : toastr.error("Cannot edit Default folder") : toastr.error("Please choose a folder first") }, saveFolder: function () { if ("" != o.ManageFolder.FolderName()) { var r = o.ManageFolder.IsNew() ? 0 : o.SelectedFolder().Id; if (0 != _.filter(o.Folders(), function (e) { return e.FolderName.toLowerCase() == o.ManageFolder.FolderName().toLowerCase() && (0 == r || 0 != r && e.Id != r) }).length) return toastr.error("Folder name is already in use, please choose a different Folder Name"), !1; ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/SaveFolder", model: JSON.stringify({ folderId: r, folderName: o.ManageFolder.FolderName() }) } }).done(function (e) { if (e.d && (e = e.d), o.ManageFolder.IsNew()) o.Folders.push({ Id: e, FolderName: o.ManageFolder.FolderName() }); else { var r = o.SelectedFolder(); o.Folders.remove(o.SelectedFolder()), r.FolderName = o.ManageFolder.FolderName(), o.Folders.push(r) } $("#folderModal").modal("hide") }) } else toastr.error("Please enter a Folder Name") }, deleteFolder: function () { null != o.SelectedFolder() ? 0 != o.SelectedFolder().Id ? bootbox.confirm("Are you sure you want to delete this Folder?\n\nWARNING: Deleting a folder will delete all reports in the folder and this action cannot be undone.", function (r) { r && ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/DeleteFolder", model: JSON.stringify({ folderId: o.SelectedFolder().Id }) } }).done(function () { o.Folders.remove(o.SelectedFolder()), o.SelectedFolder(null) }) }) : toastr.error("Cannot delete Default folder") : toastr.error("Please choose a folder first") } }, o.reportsInFolder = ko.computed(function () { return null == o.SelectedFolder() ? [] : _.filter(o.SavedReports(), function (e) { return e.folderId == o.SelectedFolder().Id }) }), o.clearReport = function () { o.ReportName(""), o.ReportDescription(""), o.ReportType("List"), o.FolderID(null == o.SelectedFolder() ? 0 : o.SelectedFolder().Id), o.ChosenFields([]), o.SelectedFields([]), o.SelectFields([]), o.SelectedField(null), o.SelectedProc(null), o.IncludeSubTotal(!1), o.EditFiltersOnReport(!1), o.ShowUniqueRecords(!1), o.AggregateReport(!1), o.SortByField(null), o.SortDesc(!1), o.FilterGroups([]), o.ReportID(0), o.SaveReport(o.CanSaveReports()), o.scheduleBuilder.clear(), o.SortFields([]) }, o.SelectedProc.subscribe(function (r) { if (null != r) { o.ChooseFields([]), o.SelectedFields([]); var t = _.map(r.Columns, function (e) { var t = ko.toJS(r.SelectedFields && r.SelectedFields.length ? _.find(r.SelectedFields, { fieldName: e.DisplayName }) : null) || o.getEmptyFormulaField(); return t.fieldName = e.DisplayName, t.tableName = r.DisplayName, t.procColumnId = e.Id, t.procColumnName = e.ColumnName, o.setupField(t) }); r.SelectedFields = null, o.SelectedFields(t); var a = !0, l = _.map(r.Parameters, function (o) { var t = ko.toJS(r.SelectedParameters && r.SelectedParameters.length ? _.find(r.SelectedParameters, { ParameterName: o.ParameterName }) : null); return o.operators = ["="], o.ParameterValue && o.operators.push("is default"), o.Required || o.operators.push("is blank"), o.Required || o.operators.push("is null"), o.Operator ? (o.Operator(t ? t.Operator : "="), o.Value(t ? t.Value : o.ParameterValue)) : (o.Operator = ko.observable(t ? t.Operator : "="), o.Value = ko.observable(t ? t.Value : o.ParameterValue), o.Operator.subscribe(function (e) { "is default" == e && o.Value(o.ParameterValue) })), o.Field = { hasForeignKey: o.ForeignKey, fieldType: o.ParameterDataTypeString }, o.LookupList = ko.observableArray([]), o.Value() && o.LookupList.push({ id: o.Value(), text: o.Value() }), o.ForeignKey && ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetPrmLookupList", model: JSON.stringify({ parameterId: o.Id, procId: r.Id }) } }).done(function (r) { r.d && (r = r.d), ajaxcall({ type: "POST", url: e.lookupListUrl, data: JSON.stringify({ lookupSql: r.sql, connectKey: r.connectKey }) }).done(function (e) { e.d && (e = e.d), o.LookupList(e) }) }), o.Hidden || (a = !1), o }); r.SelectedParameters = null, o.Parameters(l), o.showParameters(!a) } }), o.SelectedTable.subscribe(function (r) { o.SelectedProc(null), null != r ? ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetFields", model: JSON.stringify({ tableId: r.tableId, includeDoNotDisplay: !1 }) } }).done(function (e) { e.d && (e = e.d); var t = _.map(e, function (e, t) { var a = _.filter(o.SelectedFields(), function (o) { return o.fieldId == e.fieldId }); return a.length > 0 ? a[0] : (e.tableName = r.tableName, o.setupField(e)) }); o.ChooseFields(t) }) : o.ChooseFields([]) }), o.MoveChosenFields = function () { _.forEach(o.ChosenFields(), function (e) { _.filter(o.SelectedFields(), function (o) { return o.fieldId == e.fieldId }).length > 0 ? toastr.error(e.fieldName + " is already Selected") : o.SelectedFields.push(e) }) }, o.MoveAllFields = function () { _.forEach(o.ChooseFields(), function (e) { 0 === _.filter(o.SelectedFields(), function (o) { return o.fieldId == e.fieldId }).length && o.SelectedFields.push(e) }) }, o.RemoveSelectedFields = function () { _.forEach(o.ChooseFields(), function (e) { o.SelectedFields.remove(e) }) }, o.isFormulaField = ko.observable(!1), o.formulaFields = ko.observableArray([]), o.formulaFieldLabel = ko.observable(""), o.formulaDataFormat = ko.observable(""), o.formulaOnlyHasDateFields = ko.computed(function () { var e = o.formulaFields(); if (e.length <= 0) return !1; var r = !0; return _.forEach(e, function (e) { if (!e.setupFormula.isParenthesesStart() && !e.setupFormula.isParenthesesEnd() && !e.setupFormula.isConstantValue() && e.fieldType && e.fieldType.indexOf("Date") < 0) return r = !1, !1 }), r }), o.getEmptyFormulaField = function () { return { tableName: "Custom", fieldName: o.formulaFieldLabel() || "Custom", fieldFormat: o.formulaDataFormat() || "String", fieldType: "Custom", aggregateFunction: "", filterOnFly: !1, disabled: !1, groupInGraph: !1, hideInDetail: !1, linkField: !1, linkFieldItem: null, fieldAggregate: ["Group", "Count"], fieldAggregateWithDrilldown: ["Group", "Count"], isFormulaField: !0, hasForeignKey: !1, fieldFilter: ["=", "<>", ">=", ">", "<", "<="], formulaItems: o.formulaFields() } }, o.selectedFieldsCanFilter = ko.computed(function () { return _.filter(o.SelectedFields(), function (e) { return !e.isFormulaField() }) }), o.clearFormulaField = function () { o.formulaFields([]), o.formulaFieldLabel(""), o.formulaDataFormat("String") }, o.isFormulaField.subscribe(function () { o.clearFormulaField() }), o.saveFormulaField = function () { if (0 != o.formulaFields().length) if (o.validateReport()) { var e = o.getEmptyFormulaField(); o.SelectedFields.push(o.setupField(e)), o.clearFormulaField(), o.isFormulaField(!1) } else toastr.error("Please correct validation issues"); else toastr.error("Please select some items for the Custom Field") }, o.showFormulaOperation = function (e) { var r = o.formulaFields().length; return !(r <= 1 || e == r - 1) && (!o.formulaFields()[e + 1].setupFormula.isParenthesesEnd() && !o.formulaFields()[e].setupFormula.isParenthesesStart()) }, o.addFormulaParentheses = function () { if (!(o.formulaFields().length <= 0 || o.formulaFields()[0].setupFormula.isParenthesesStart() && o.formulaFields()[o.formulaFields().length - 1].setupFormula.isParenthesesEnd())) { var e = o.getEmptyFormulaField(), r = o.setupField(Object.assign({}, e)), t = o.setupField(Object.assign({}, e)); r.setupFormula.isParenthesesStart(!0), t.setupFormula.isParenthesesEnd(!0), o.formulaFields.splice(0, 0, r), o.formulaFields.push(t) } }, o.addFormulaConstantValue = function () { var e = o.getEmptyFormulaField(), r = o.setupField(Object.assign({}, e)); r.setupFormula.isConstantValue(!0), o.formulaFields.push(r) }, o.isFieldValidForYAxis = function (e, r) { return !(e > 0 && "Bar" == o.ReportType() && ["Int", "Double", "Money"].indexOf(r) < 0) }, o.isChart = ko.computed(function () { return ["List", "Summary", "Single"].indexOf(o.ReportType()) < 0 }), o.isFieldValidForSubGroup = function (e, o) { return !(e > 0 && ["Int", "Double", "Money"].indexOf(o) < 0) }, o.canDrilldown = ko.computed(function () { return ["List"].indexOf(o.ReportType()) < 0 }), o.dateFields = ko.computed(function () { return _.filter(o.SelectedFields(), function (e) { return "DateTime" == e.fieldType }) }), o.TotalSeries = ko.observable(0), o.AllSqlQuries = ko.observable(""), o.canAddSeries = ko.computed(function () { var e = o.dateFields().length > 0 && ["Group", "Bar", "Line"].indexOf(o.ReportType()) >= 0 && "DateTime" == o.SelectedFields()[0].fieldType, r = _.filter(o.FilterGroups(), function (e) { return _.filter(e.Filters(), function (e) { return "range" == e.Operator() && e.Value() && 0 == e.Value().indexOf("This") }).length > 0 }).length > 0; return e && r }), o.canAddSeries.subscribe(function (e) { e || o.AdditionalSeries([]) }), o.AddSeries = function (e) { e = e || {}; var r = ko.observable(); e.Field ? r(o.FindField(e.Field().fieldId)) : r(o.dateFields()[0]); var t = ko.observableArray([]); function a(e) { t("This Year" === e ? ["Last Year", "2 Years ago", "3 Years ago", "4 Years ago", "5 Years ago"] : "This Month" === e ? ["Last Month", "2 Months ago", "3 Months ago", "4 Months ago", "5 Months ago"] : "This Week" === e ? ["Last Week", "2 Weeks ago", "3 Weeks ago", "4 Weeks ago", "5 Weeks ago"] : []) } _.forEach(o.FilterGroups(), function (e) { _.forEach(e.Filters(), function (e) { if (e.Field().FieldId == r().FieldId) return a(e.Value()), e.Value.subscribe(function (e) { a(e) }), !1 }) }), o.AdditionalSeries.push({ Field: r, Operator: ko.observable("Range"), Value: ko.observable(e.Value), Range: t }) }, o.canMoveUp = function () { return 1 == o.SelectFields().length && o.SelectedFields.indexOf(o.SelectFields()[0]) >= 1 }, o.canMoveDown = function () { return 1 == o.SelectFields().length && o.SelectedFields.indexOf(o.SelectFields()[0]) < o.SelectedFields().length - 1 }, o.MoveUp = function () { if (o.canMoveUp()) { var e = o.SelectFields()[0], r = o.SelectedFields.indexOf(e); if (r >= 1) { var t = o.SelectedFields(); o.SelectedFields.splice(r - 1, 2, t[r], t[r - 1]) } } }, o.MoveDown = function () { if (o.canMoveDown()) { var e = o.SelectFields()[0], r = o.SelectedFields.indexOf(e), t = o.SelectedFields(); r < t.length - 1 && o.SelectedFields.splice(r, 2, t[r + 1], t[r]) } }, o.RemoveField = function (e) { o.SelectedFields.remove(e) }, o.RemoveSeries = function (e) { o.AdditionalSeries.remove(e) }, o.FindField = function (e) { return _.filter(o.SelectedFields(), function (o) { return o.fieldId == e })[0] }, o.SaveWithoutRun = function () { o.RunReport(!0) }, o.BuildFilterData = function (e) { var r = []; return _.forEach(e, function (e) { var t = []; _.forEach(e.Filters(), function (r, a) { var l = r.Apply() && r.IsFilterOnFly || !r.IsFilterOnFly ? { SavedReportId: o.ReportID(), FieldId: r.Field().fieldId, AndOr: 0 == a ? e.AndOr() : r.AndOr(), Operator: r.Operator(), Value1: "in" == r.Operator() || "not in" == r.Operator() ? r.ValueIn().join(",") : r.Operator().indexOf("blank") >= 0 ? "blank" : r.Value(), Value2: r.Value2(), Filters: 0 == a ? o.BuildFilterData(e.FilterGroups()) : [] } : null; null == l || l.Value1 || l.Value2 || (l = null), l && t.push(l) }), r.push({ SavedReportId: o.ReportID(), isRoot: e.isRoot, AndOr: e.AndOr(), Filters: t }) }), r }, o.SeriesDataIntoFilter = function (e, r) { var t = []; return _.forEach(e, function (e) { var a = []; a.push(o.AdditionalSeries()[r]); var l = []; _.forEach(a, function (r, t) { var a = { SavedReportId: o.ReportID(), FieldId: r.Field().fieldId, AndOr: "AND", Operator: r.Operator().toLowerCase(), Value1: "in" == r.Operator() || "not in" == r.Operator() ? r.ValueIn().join(",") : r.Operator().indexOf("blank") >= 0 ? "blank" : r.Value(), Filters: 0 == t ? o.BuildFilterData(e.FilterGroups()) : [] }; null == a || a.Value1 || a.Value2 || (a = null), a && l.push(a) }), t.push({ SavedReportId: o.ReportID(), isRoot: e.isRoot, AndOr: e.AndOr(), Filters: l }) }), t }, o.BuildReportData = function (r, t, a) { r = r || []; var l = null != _.find(o.SelectedFields(), function (e) { return "Group in Detail" == e.selectedAggregate() }), n = t ? o.SeriesDataIntoFilter(o.FilterGroups(), a) : o.BuildFilterData(o.FilterGroups()); return { ReportID: o.ReportID(), ReportName: o.ReportName(), ReportDescription: o.ReportDescription(), FolderID: o.FolderID(), SelectedFieldIDs: _.map(o.SelectedFields(), function (e) { return e.fieldId }), Filters: n, Series: _.map(o.AdditionalSeries(), function (e) { return { SavedReportId: o.ReportID(), FieldId: e.Field().fieldId, Operator: e.Operator(), Value: e.Value() } }), IncludeSubTotals: o.IncludeSubTotal(), EditFiltersOnReport: o.EditFiltersOnReport(), ShowUniqueRecords: o.ShowUniqueRecords(), IsAggregateReport: !(r.length > 0 && !l) && o.AggregateReport(), ShowDataWithGraph: o.ShowDataWithGraph(), ShowOnDashboard: o.ShowOnDashboard(), SortBy: o.SortByField(), SortDesc: o.SortDesc(), SelectedSorts: _.map(o.SortFields(), function (e) { return { FieldId: e.sortByFieldId(), Descending: e.sortDesc() } }), ReportType: o.ReportType(), UseStoredProc: o.useStoredProc(), StoredProcId: o.useStoredProc() ? o.SelectedProc().Id : null, GroupFunctionList: _.map(o.SelectedFields(), function (e) { return { FieldID: e.fieldId, GroupFunc: e.selectedAggregate(), FilterOnFly: e.filterOnFly(), Disabled: e.disabled(), GroupInGraph: e.groupInGraph(), HideInDetail: e.hideInDetail(), IsCustom: e.isFormulaField(), CustomLabel: e.fieldName, DataFormat: "None" == e.fieldFormat() ? null : e.fieldFormat(), CustomFieldDetails: _.map(e.formulaItems(), function (e) { return { FieldId: e.fieldId(), IsParenthesesStart: e.isParenthesesStart() || !1, IsParenthesesEnd: e.isParenthesesEnd() || !1, Operation: e.formulaOperation(), ConstantValue: e.constantValue() } }), LinkField: e.linkField(), LinkFieldItem: e.linkField() ? e.linkFieldItem.toJs() : null, FieldLabel: e.fieldLabel(), DecimalPlaces: e.decimalPlaces(), FieldAlign: e.fieldAlign(), FontColor: e.fontColor(), BackColor: e.backColor(), HeaderFontColor: e.headerFontColor(), HeaderBackColor: e.headerBackColor(), FontBold: e.fontBold(), HeaderFontBold: e.headerFontBold(), FieldWidth: e.fieldWidth(), FieldConditionOp: e.fieldConditionOp(), FieldConditionVal: e.fieldConditionVal() } }), Schedule: o.scheduleBuilder.toJs(), DrillDownRow: r, UserId: o.manageAccess.getAsList(o.manageAccess.users), ViewOnlyUserId: o.manageAccess.getAsList(o.manageAccess.viewOnlyUsers), UserRoles: o.manageAccess.getAsList(o.manageAccess.userRoles), ViewOnlyUserRoles: o.manageAccess.getAsList(o.manageAccess.viewOnlyUserRoles), DataFilters: e.dataFilters, SelectedParameters: o.useStoredProc() ? _.map(o.Parameters(), function (e) { return { UseDefault: "is default" == e.Operator(), ParameterId: e.Id, ParameterName: e.ParameterName, Value: e.Value(), Operator: e.Operator() } }) : [] } }, o.SaveFilterAndRunReport = function () { o.validateReport() ? (ajaxcall({ url: e.runReportApiUrl, type: "POST", data: JSON.stringify({ method: "/ReportApi/SaveReportFilter", SaveReport: !1, ReportJson: JSON.stringify(o.BuildReportData()), adminMode: o.adminMode() }) }), o.RunReport(!1)) : toastr.error("Please correct validation issues") }, o.RunReport = function (r) { if (r = !0 === r, o.TotalSeries(o.AdditionalSeries().length), "Single" != o.ReportType() || 1 == o.enabledFields().length) if (o.validateReport()) { var t = 0, a = !1, l = !1, n = null, i = o.AdditionalSeries().length, d = []; do { t > 0 && (a = !0, o.CanSaveReports(!1)), d.push(ajaxcall({ url: e.runReportApiUrl, type: "POST", data: JSON.stringify({ method: "/ReportApi/RunReport", SaveReport: !!o.CanSaveReports() && o.SaveReport(), ReportJson: JSON.stringify(o.BuildReportData([], a, t - 1)), adminMode: o.adminMode() }), async: !1 }).done(function (e) { e.d && (e = e.d), n = e, o.AllSqlQuries(o.AllSqlQuries() + (e.sql + ",")), o.ReportID(e.reportId), o.SaveReport() && r && 0 === i && (toastr.success("Report Saved"), o.LoadAllSavedReports()), r || "execute" != o.ReportMode() && "dashboard" != o.ReportMode() || (l = !0, o.ExecuteReportQuery(e.sql, e.connectKey, o.ReportSeries)) })), t++ } while (t < i + 1); $.when.apply($, d).done(function () { if (!1 === l) { if (r) return void toastr.success("Report Saved"); redirectToReport(e.runReportUrl, { reportId: n.reportId, reportName: o.ReportName(), reportDescription: o.ReportDescription(), includeSubTotal: o.IncludeSubTotal(), showUniqueRecords: o.ShowUniqueRecords(), aggregateReport: o.AggregateReport(), showDataWithGraph: o.ShowDataWithGraph(), reportSql: o.AllSqlQuries(), connectKey: n.connectKey, reportFilter: JSON.stringify(_.map(o.FlyFilters(), function (e) { return ko.toJS(e) })), reportType: o.ReportType(), selectedFolder: null != o.SelectedFolder() ? o.SelectedFolder().Id : 0, reportSeries: _.map(o.AdditionalSeries(), function (e, o) { return e.Value() }) }) } }) } else toastr.error("Please correct validation issues"); else toastr.error("All fields except one must be hidden for Single Value Report") }, o.ExecuteReportQuery = function (r, t, a) { if (r && t) return ajaxcall({ url: e.execReportUrl, type: "POST", data: JSON.stringify({ reportSql: r, connectKey: t, reportType: o.ReportType(), pageNumber: o.pager.currentPage(), pageSize: o.pager.pageSize(), sortBy: o.pager.sortColumn() || "", desc: o.pager.sortDescending() || !1, ReportSeries: a }) }).done(function (l) { l.d && (l = l.d); var n = o.ReportResult(); function i(e, o) { return e == o || !(o.indexOf("(Count)") < 0 && o.indexOf("(Avg)") < 0 && o.indexOf("(Sum)") < 0 && o.indexOf("(Average)") < 0) && (o = (o || "").replace("(Count)", "").replace("(Avg)", "").replace("(Average)", "").replace("(Sum)", "").trim(), (e = ((e = (e || "").trim()).endsWith("Id") || e.endsWith("ID") ? e.slice(0, -2) : e).trim()) == o) } function d(e) { _.forEach(e, function (e, r) { var t; (t = o.useStoredProc() ? _.find(o.SelectedFields(), function (o) { return i(o.procColumnName, e.ColumnName) }) : _.find(o.SelectedFields(), function (o) { return i(o.fieldName, e.ColumnName) })) && t.linkField() ? (e.linkItem = t.linkFieldItem.toJs(), e.linkField = !0) : (e.linkItem = {}, e.linkField = !1), t = ko.toJS(t || {}), e.decimalPlaces = t.decimalPlaces, e.fieldAlign = t.fieldAlign, e.fieldConditionOp = t.fieldConditionOp, e.fieldConditionVal = t.fieldConditionVal, e.fieldFormat = t.fieldFormat, e.fieldLabel = t.fieldLabel, e.fieldName = t.fieldName, e.fieldWidth = t.fieldWidth, e.fontBold = t.fontBold, e.headerFontBold = t.headerFontBold, e.headerFontColor = t.headerFontColor, e.headerBackColor = t.headerBackColor, e.fieldId = t.fieldId, e.fontColor = t.fontColor, e.backColor = t.backColor }) } function s(r, t) { _.forEach(r, function (r, a) { r.LinkTo = ""; var l = t[a]; if (l && l.linkField) { var n = l.linkItem, i = ""; n.LinksToReport ? (i = e.runLinkReportUrl + "?reportId=" + n.LinkedToReportId, n.SendAsFilterParameter && (i += "&filterId=" + n.SelectedFilterId + "&filterValue=" + r.LabelValue)) : i = n.LinkToUrl + (n.SendAsQueryParameter ? "?" + n.QueryParameterName + "=" + r.LabelValue : ""), r.LinkTo = i } if (l = l || {}, r.backColor = l.backColor, r.fieldAlign = l.fieldAlign, r.fieldWidth = l.fieldWidth, r.fontBold = l.fontBold, r.fontColor = l.fontColor, r.fieldId = l.fieldId, o.decimalFormatTypes.indexOf(l.fieldFormat) >= 0) switch (r.FormattedValue = o.formatNumber(r.Value, l.decimalPlaces), l.fieldFormat) { case "Currency": r.FormattedValue = "$" + r.FormattedValue; break; case "Percentage": r.FormattedValue = r.FormattedValue + "%" }if (o.dateFormatTypes.indexOf(l.fieldFormat) >= 0) switch (l.fieldFormat) { case "Date": r.FormattedValue = new Date(r.Value).toLocaleDateString("en-US", { year: "numeric", month: "numeric", day: "numeric" }); break; case "Date and Time": r.FormattedValue = new Date(r.Value).toLocaleDateString("en-US", { year: "numeric", month: "numeric", day: "numeric", hour: "numeric", minute: "numeric", second: "numeric" }); break; case "Time": r.FormattedValue = new Date(r.Value).toLocaleTimeString("en-US", { hour: "numeric", minute: "numeric", second: "numeric" }) } }) } n.HasError(l.HasError), n.Exception(l.Exception), n.Warnings(l.Warnings), n.ReportDebug(l.ReportDebug), n.ReportSql(l.ReportSql), o.ReportSeries = a, d(l.ReportData.Columns), l.ReportData.IsDrillDown = ko.observable(!1), _.forEach(l.ReportData.Rows, function (r) { r.DrillDownData = ko.observable(null), r.pager = new pagerViewModel({ pageSize: 10 }), r.sql = "", r.connectKey = "", r.changeSort = function (e) { return r.pager.changeSort(e), r.execute(), !1 }, r.isExpanded = ko.observable(!1), r.execute = function () { "" != r.sql && ajaxcall({ url: e.execReportUrl, type: "POST", data: JSON.stringify({ reportSql: r.sql, connectKey: r.connectKey, reportType: "List", pageNumber: r.pager.currentPage(), pageSize: r.pager.pageSize(), sortBy: r.pager.sortColumn() || "", desc: r.pager.sortDescending() || !1, ReportSeries: a }) }).done(function (e) { e.d && (e = e.d), e.ReportData.IsDrillDown = ko.observable(!0), d(e.ReportData.Columns), _.forEach(e.ReportData.Rows, function (o) { s(o.Items, e.ReportData.Columns) }), r.DrillDownData(e.ReportData), r.pager.totalRecords(e.Pager.TotalRecords), r.pager.pages(e.Pager.TotalPages) }) }, r.expand = function (t) { ajaxcall({ url: e.runReportApiUrl, type: "POST", data: JSON.stringify({ method: "/ReportApi/RunDrillDownReport", SaveReport: !1, ReportJson: JSON.stringify(o.BuildReportData(r.Items)), adminMode: o.adminMode() }) }).done(function (e) { e.d && (e = e.d), r.sql = e.sql, r.connectKey = e.connectKey, o.expandSqls.push({ index: t, sql: r.sql }), r.execute() }), r.isExpanded(!0) }, r.pager.currentPage.subscribe(function () { r.execute() }), r.collapse = function () { r.isExpanded(!1) }, r.toggle = function () { r.isExpanded() ? r.collapse() : r.expand() }, s(r.Items, l.ReportData.Columns) }), n.ReportData(l.ReportData), o.pager.totalRecords(l.Pager.TotalRecords), o.pager.pages(l.Pager.TotalPages), o.currentSql(r), o.currentConnectKey(t), l.Warnings && toastr.info("Note: " + l.Warnings), o.isChart() && (google.charts.load("current", { packages: ["corechart", "geochart"] }), google.charts.setOnLoadCallback(o.DrawChart)), o.IncludeSubTotal() && ajaxcall({ url: e.runReportApiUrl, type: "POST", data: JSON.stringify({ method: "/ReportApi/RunReport", SaveReport: !!o.CanSaveReports() && o.SaveReport(), ReportJson: JSON.stringify(o.BuildReportData()), adminMode: o.adminMode(), SubTotalMode: !0 }) }).done(function (r) { r.d && (r = r.d), ajaxcall({ url: e.execReportUrl, type: "POST", data: JSON.stringify({ reportSql: r.sql, connectKey: r.connectKey, reportType: o.ReportType(), pageNumber: 1, pageSize: 1, sortBy: "", desc: !1, ReportSeries: null }) }).done(function (e) { e.d && (e = e.d), o.ReportResult().SubTotals(e.ReportData.Rows) }) }), setTimeout(function () { o.allowTableResize() }, 2e3) }) }, o.expandSqls = ko.observableArray([]), o.ExpandAll = function () { o.expandSqls([]); var e = 0; _.forEach(o.ReportResult().ReportData().Rows, function (o) { o.expand(e++) }), o.allExpanded(!0) }, o.CollapseAll = function () { _.forEach(o.ReportResult().ReportData().Rows, function (e) { e.collapse() }), o.allExpanded(!1), o.expandSqls([]) }, o.getExpandSqls = ko.computed(function () { return o.allExpanded() && 0 != o.expandSqls().length ? _.map(_.orderBy(o.expandSqls(), "index"), function (e) { return e.sql }) : [] }), o.skipDraw = !0 === e.skipDraw, o.DrawChart = function () { if (o.isChart() && !0 !== o.skipDraw) { var e = o.ReportResult().ReportData(), r = new google.visualization.DataTable, t = [], a = []; _.forEach(e.Columns, function (e, l) { var n = o.SelectedFields()[l]; 0 == l ? r.addColumn(e.IsNumeric ? "number" : "string", e.fieldLabel || e.ColumnName) : void 0 !== n && n.groupInGraph() ? t.push({ index: l, column: e.fieldLabel || e.ColumnName }) : e.IsNumeric && a.push({ index: l, column: e.fieldLabel || e.ColumnName }) }), 0 == t.length && _.forEach(e.Columns, function (e, o) { o > 0 && e.IsNumeric && r.addColumn(e.IsNumeric ? "number" : "string", e.fieldLabel || e.ColumnName) }); var l = [], n = []; _.forEach(e.Rows, function (e) { var o = []; _.forEach(e.Items, function (e, i) { if (0 == i) t.length > 0 && (o = _.filter(l, function (o) { return o[0] == e.Value })).length > 0 ? (l = l.filter(function (o) { return o[0] != e.Value }), o = o[0]) : o.push((e.Column.IsNumeric ? parseInt(e.Value) : e.Value) || (e.Column.IsNumeric ? 0 : "")); else if (t.length > 0) { 1 == _.filter(t, function (e) { return e.index == i }).length ? 0 == _.filter(n, function (o) { return o == e.Value }).length && (n.push(e.Value || ""), _.forEach(a, function (o) { r.addColumn("number", e.Value + (0 == o ? "" : "-" + o)) })) : e.Column.IsNumeric && o.push((e.Column.IsNumeric ? parseInt(e.Value) : e.Value) || (e.Column.IsNumeric ? 0 : "")) } else e.Column.IsNumeric && o.push((e.Column.IsNumeric ? parseInt(e.Value) : e.Value) || (e.Column.IsNumeric ? 0 : "")) }), l.push(o) }), _.forEach(l, function (e) { if (e.length != r.getNumberOfColumns()) for (var o = 0; o <= r.getNumberOfColumns() - e.length; o++)e.push(0) }), r.addRows(l); var i = { title: o.ReportName(), animation: { startup: !0, duration: 1e3, easing: "out" } }, d = document.getElementById("chart_div_" + o.ReportID()), s = null; "Pie" == o.ReportType() && (s = new google.visualization.PieChart(d)), "Bar" == o.ReportType() && (s = new google.visualization.ColumnChart(d)), "Line" == o.ReportType() && (s = new google.visualization.LineChart(d)), "Map" == o.ReportType() && (s = new google.visualization.GeoChart(d)), s.draw(r, i), o.ChartData(s.getImageURI()) } }, o.loadFolders = function (r) { return ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetFolders", model: JSON.stringify({ adminMode: o.adminMode() }) } }).done(function (e) { if (e.d && (e = e.d), o.Folders(e), o.SelectedFolder(null), r) { var t = _.filter(e, function (e) { return e.Id == r }); t.length > 0 && o.SelectedFolder(t[0]) } }) }, o.editLinkField = ko.observable(), o.editFieldOptions = ko.observable(), o.setupField = function (r) { r.selectedFieldName = r.tableName + " > " + r.fieldName, r.selectedAggregate = ko.observable(r.aggregateFunction), r.filterOnFly = ko.observable(r.filterOnFly), r.disabled = ko.observable(r.disabled), r.groupInGraph = ko.observable(r.groupInGraph), r.hideInDetail = ko.observable(r.hideInDetail), r.fieldAggregateWithDrilldown = r.fieldAggregate.concat("Only in Detail").concat("Group in Detail"), r.linkField = ko.observable(r.linkField), r.linkFieldItem = new linkFieldViewModel(r.linkFieldItem, e), r.isFormulaField = ko.observable(r.isFormulaField), r.fieldFormat = ko.observable(r.fieldFormat), r.fieldLabel = ko.observable(r.fieldLabel), r.decimalPlaces = ko.observable(r.decimalPlaces), r.fieldAlign = ko.observable(r.fieldAlign), r.fontColor = ko.observable(r.fontColor), r.backColor = ko.observable(r.backColor || "#ffffff"), r.headerFontColor = ko.observable(r.headerFontColor), r.headerBackColor = ko.observable(r.headerBackColor || "#ffffff"), r.fontBold = ko.observable(r.fontBold), r.headerFontBold = ko.observable(r.headerFontBold), r.fieldWidth = ko.observable(r.fieldWidth), r.fieldConditionOp = ko.observable(r.fieldConditionOp), r.fieldConditionVal = ko.observable(r.fieldConditionVal), r.applyAllHeaderFontColor = ko.observable(!1), r.applyAllHeaderBackColor = ko.observable(!1), r.applyAllFontColor = ko.observable(!1), r.applyAllBackColor = ko.observable(!1), r.applyAllBold = ko.observable(!1), r.applyAllHeaderBold = ko.observable(!1), r.toggleDisable = function () { !r.disabled() && o.enabledFields().length < 2 || r.disabled(!r.disabled()) }; var t = []; return _.forEach(r.formulaItems || [], function (e) { t.push(new formulaFieldViewModel({ fieldId: e.fieldId || 0, isParenthesesStart: e.setupFormula ? e.setupFormula.isParenthesesStart() : e.isParenthesesStart, isParenthesesEnd: e.setupFormula ? e.setupFormula.isParenthesesEnd() : e.isParenthesesEnd, formulaOperation: e.setupFormula ? e.setupFormula.formulaOperation() : e.formulaOperation, constantValue: e.setupFormula ? e.setupFormula.constantValue() : e.constantValue })) }), r.formulaItems = ko.observableArray(t), r.setupFormula = new formulaFieldViewModel, r.setupLinkField = function () { o.editLinkField(r), e.linkModal && e.linkModal.modal("show") }, r.removeLinkField = function () { r.linkField(!1), r.linkFieldItem.clear(), e.linkModal && e.linkModal.modal("hide") }, r.saveLinkField = function () { r.linkFieldItem.validateLink() ? (r.linkField(!0), e.linkModal && e.linkModal.modal("hide")) : toastr.error("Please correct validation issues") }, r.setupFieldOptions = function () { o.currentFieldOptions = { fieldFormat: r.fieldFormat(), fieldLabel: r.fieldLabel(), decimalPlaces: r.decimalPlaces(), fieldAlign: r.fieldAlign(), fontColor: r.fontColor(), backColor: r.backColor(), headerFontColor: r.headerFontColor(), headerBackColor: r.headerBackColor(), fontBold: r.fontBold(), headerFontBold: r.headerFontBold(), fieldWidth: r.fieldWidth(), fieldConditionOp: r.fieldConditionOp(), fieldConditionVal: r.fieldConditionVal() }, o.editFieldOptions(r), e.fieldOptionsModal && e.fieldOptionsModal.modal("show") }, r.saveFieldOptions = function () { _.forEach(o.SelectedFields(), function (e) { r.applyAllHeaderFontColor() && e.headerFontColor(r.headerFontColor()), r.applyAllHeaderBackColor() && e.headerBackColor(r.headerBackColor()), r.applyAllFontColor() && e.fontColor(r.fontColor()), r.applyAllBackColor() && e.backColor(r.backColor()), r.applyAllBold() && e.fontBold(r.fontBold()), r.applyAllHeaderBold() && e.headerFontBold(r.headerFontBold()) }), e.fieldOptionsModal && e.fieldOptionsModal.modal("hide") }, r.cancelFieldOptions = function () { r.fieldFormat(o.currentFieldOptions.fieldFormat), r.fieldLabel(o.currentFieldOptions.fieldLabel), r.fieldAlign(o.currentFieldOptions.fieldAlign), r.decimalPlaces(o.currentFieldOptions.decimalPlaces), r.fontColor(o.currentFieldOptions.fontColor), r.backColor(o.currentFieldOptions.backColor), r.headerFontColor(o.currentFieldOptions.headerFontColor), r.headerBackColor(o.currentFieldOptions.headerBackColor), r.fontBold(o.currentFieldOptions.fontBold), r.headerFontBold(o.currentFieldOptions.headerFontBold), r.fieldWidth(o.currentFieldOptions.fieldWidth), r.fieldConditionOp(o.currentFieldOptions.fieldConditionOp), r.fieldConditionVal(o.currentFieldOptions.fieldConditionVal), e.fieldOptionsModal && e.fieldOptionsModal.modal("hide") }, r }, o.LoadReport = function (r, t, a) { return ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/LoadReport", model: JSON.stringify({ reportId: r, adminMode: o.adminMode(), userIdForSchedule: o.userIdForSchedule }) } }).done(function (r) { if (r.d && (r = r.d), o.useStoredProc(r.UseStoredProc), o.ReportID(r.ReportID), o.ReportType(r.ReportType), o.ReportName(r.ReportName), o.ReportDescription(r.ReportDescription), o.FolderID(r.FolderID), o.useStoredProc()) { var l = _.find(o.Procs(), { Id: r.StoredProcId }); l && (l.SelectedFields = r.SelectedFields, l.SelectedParameters = r.SelectedParameters, o.SelectedProc(l)) } else _.forEach(r.SelectedFields, function (e) { e = o.setupField(e) }), o.SelectedFields(r.SelectedFields); o.ChosenFields([]), o.SelectFields([]), o.SelectedField(null), o.manageAccess.setupList(o.manageAccess.users, r.UserId || ""), o.manageAccess.setupList(o.manageAccess.userRoles, r.UserRoles || ""), o.manageAccess.setupList(o.manageAccess.viewOnlyUserRoles, r.ViewOnlyUserRoles || ""), o.manageAccess.setupList(o.manageAccess.viewOnlyUsers, r.ViewOnlyUserId || ""), o.IncludeSubTotal(r.IncludeSubTotals), o.EditFiltersOnReport(r.EditFiltersOnReport), o.ShowUniqueRecords(r.ShowUniqueRecords), o.AggregateReport(r.IsAggregateReport), o.ShowDataWithGraph(r.ShowDataWithGraph), o.ShowOnDashboard(r.ShowOnDashboard), o.SortByField(r.SortBy), o.SortDesc(r.SortDesc), o.pager.sortDescending(r.SortDesc), o.CanEdit((!e.clientId || r.ClientId == e.clientId) && (!e.userId || r.UserId == e.userId) || o.adminMode()), o.FilterGroups([]), o.AdditionalSeries([]), o.SortFields([]), o.scheduleBuilder.fromJs(r.Schedule), o.HideReportHeader(r.HideReportHeader), o.useReportHeader(r.UseReportHeader && !r.HideReportHeader), "execute" == o.ReportMode() && (o.useReportHeader() ? (o.headerDesigner.init(!0), o.headerDesigner.loadCanvas(!0)) : o.headerDesigner.dispose()); var n = []; function i(e, r) { e && 0 != e.length && _.forEach(e, function (e) { if (e.FieldId) { if (n.indexOf(e.FieldId) < 0) { var t = _.filter(o.SelectedFields(), function (o) { return 1 == o.filterOnFly() && o.fieldId == e.FieldId }).length > 0; t && n.push({ fieldId: e.FieldId }), null == r && (r = o.FilterGroups()[0]), r.AddFilter(e, t) } } else r = null == r ? o.FilterGroups()[0] : r.AddFilterGroup({ AndOr: e.AndOr }); i(e.Filters, r) }) } if (1 == t) { if (e.reportFilter && "[]" != e.reportFilter) { var d = JSON.parse(e.reportFilter); _.forEach(d, function (e) { var r = _.filter(n, function (o) { return o.fieldId == e.Field.fieldId }); r.length > 0 && (e.FieldId = e.Field.fieldId, e.Value1 = e.Value, n.push(r[0]), o.FilterGroups()[0].AddFilter(e, !0)) }) } i(r.Filters) } else i(r.Filters); if (_.forEach(r.Series, function (e) { o.AddSeries(e) }), _.forEach(r.SelectedSorts, function (e) { o.addSortField(e.FieldId, e.Descending) }), o.SaveReport(!t && o.CanEdit()), !a && o.AdditionalSeries().length > 0 && (a = _.map(o.AdditionalSeries(), function (e, o) { return e.Value() }).join(",")), "execute" == o.ReportMode() || "dashboard" == o.ReportMode()) return o.ExecuteReportQuery(e.reportSql, e.reportConnect, a) }) }, o.LoadAllSavedReports = function () { ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetSavedReports", model: JSON.stringify({ adminMode: o.adminMode() }) } }).done(function (r) { r.d && (r = r.d), _.forEach(r, function (r) { r.runMode = !1, r.openReport = function () { return o.LoadReport(r.reportId).done(function () { r.runMode ? (o.SaveReport(!1), o.RunReport(), r.runMode = !1) : o.ReportMode("generate") }) }, r.copyReport = function () { r.openReport().done(function () { o.ReportID(0), o.ReportName("Copy of " + o.ReportName()), o.CanEdit(!0), o.SaveReport(!0) }) }, r.runReport = function () { r.runMode = !0, r.openReport() }, r.deleteReport = function () { bootbox.confirm("Are you sure you would like to Delete this Report?", function (t) { t && ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/DeleteReport", model: JSON.stringify({ reportId: r.reportId }) } }).done(function () { o.SavedReports.remove(r) }) }) }, e.reportId > 0 && r.reportId == e.reportId && (r.openReport(), e.reportWizard.modal("show")) }), o.SavedReports(r) }) }, "dashboard" != o.ReportMode() && o.loadFolders().done(function () { o.LoadAllSavedReports(), ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/CanSaveReports", model: "{}" } }).done(function (e) { e.d && (e = e.d), e = e || { allowUsersToCreateReports: !0, allowUsersToManageFolders: !0 }, o.CanSaveReports(e.allowUsersToCreateReports), o.CanManageFolders(e.allowUsersToManageFolders) }) }), o.changeSort = function (e) { return o.pager.changeSort(e), o.ExecuteReportQuery(o.currentSql(), o.currentConnectKey(), o.ReportSeries), !1 }, o.formatNumber = function (e, o, r, t) { o = isNaN(o = Math.abs(o)) ? 2 : o, r = void 0 === r ? "." : r, t = void 0 === t ? "," : t; var a = e < 0 ? "-" : "", l = String(parseInt(e = Math.abs(Number(e) || 0).toFixed(o))), n = (n = l.length) > 3 ? n % 3 : 0; return a + (n ? l.substr(0, n) + t : "") + l.substr(n).replace(/(\decSep{3})(?=\decSep)/g, "$1" + t) + (o ? r + Math.abs(e - l).toFixed(o).slice(2) : "") }, o.isInputValid = function (e) { return (null == $(e).attr("data-notempty") || 0 != $(e).children("option").length) && (e.validity ? e.validity.valid : null == $(e).attr("required") || "" != $(e).val()) }, o.validateReport = function () { if (null != e.reportWizard) { var r = e.reportWizard.find("input,select"), t = !0; $(".needs-validation").removeClass("was-validated"); for (var a = 0; a < r.length; a++)$(r[a]).removeClass("is-invalid"), o.isInputValid(r[a]) || (t = !1, $(".needs-validation").addClass("was-validated"), $(r[a]).addClass("is-invalid")); return t } }, o.loadProcs = function () { return ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetProcedures", model: JSON.stringify({ adminMode: o.adminMode() }) } }).done(function (e) { e.d && (e = e.d), o.Procs(e) }) }, o.loadTables = function () { ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetTables", model: JSON.stringify({ adminMode: o.adminMode() }) } }).done(function (e) { e.d && (e = e.d), o.Tables(e) }) }, o.init = function (e, r) { if (r) $("#noaccountModal").modal("show"); else { o.loadFolders(e), o.loadTables(), o.loadProcs(); var t = !1; localStorage && (t = localStorage.getItem("reportAdminMode")), "true" === t && o.adminMode(!0) } }, o.allowTableResize = function () { var r, t; Array.prototype.forEach.call(document.querySelectorAll(".report-inner table th"), function (e) { e.style.position = "relative"; var o = document.createElement("div"); o.innerHTML = "&nbsp;", o.style.top = 0, o.style.right = 0, o.style.bottom = 0, o.style.width = "5px", o.style.position = "absolute", o.style.cursor = "col-resize", o.addEventListener("mousedown", function (o) { r = e, t = e.offsetWidth - o.pageX }), e.appendChild(o) }), document.addEventListener("mousemove", function (e) { r && (r.style.width = t + e.pageX + "px") }), document.addEventListener("mouseup", function () { if (r && r.id && r.style) { var t = _.find(o.SelectedFields(), { fieldId: parseInt(r.id) }); t && t.fieldWidth(r.style.width), ajaxcall({ url: e.apiUrl, noBlocking: !0, data: { method: "/ReportApi/UpdateReportColumnWidth", model: JSON.stringify({ width: r.style.width, fieldId: parseInt(r.id), reportId: parseInt(o.ReportID()) }) } }) } r = void 0 }) } }, dashboardViewModel = function (e) { var o = this; o.dashboards = ko.observableArray(e.dashboards || []), o.adminMode = ko.observable(!1), o.currentUserId = e.userId, o.currentUserRole = (e.currentUserRole || []).join(), o.reportsAndFolders = ko.observableArray([]), o.allowAdmin = ko.observable(e.allowAdmin); var r = e.dashboardId > 0 ? _.find(o.dashboards(), { id: e.dashboardId }) || { name: "", description: "" } : o.dashboards().length > 0 ? o.dashboards()[0] : { name: "", description: "" }; o.dashboard = { Id: ko.observable(r.id), Name: ko.observable(r.name), Description: ko.observable(r.description), manageAccess: manageAccess(e) }, o.currentDashboard = ko.observable(r), o.selectDashboard = ko.observable(r.id), o.selectDashboard.subscribe(function (e) { e != o.currentDashboard().id && (window.location = window.location.href.split("?")[0] + "?id=" + e) }), o.newDashboard = function () { o.dashboard.Id(0), o.dashboard.Name(""), o.dashboard.Description(""), o.dashboard.manageAccess.setupList(o.dashboard.manageAccess.users, ""), o.dashboard.manageAccess.setupList(o.dashboard.manageAccess.userRoles, ""), o.dashboard.manageAccess.setupList(o.dashboard.manageAccess.viewOnlyUserRoles, ""), o.dashboard.manageAccess.setupList(o.dashboard.manageAccess.viewOnlyUsers, ""), _.forEach(o.reportsAndFolders(), function (e) { _.forEach(e.reports, function (e) { e.selected(!1) }) }) }, o.editDashboard = function () { o.dashboard.Id(o.currentDashboard().id), o.dashboard.Name(o.currentDashboard().name), o.dashboard.Description(o.currentDashboard().description), o.dashboard.manageAccess.setupList(o.dashboard.manageAccess.users, o.currentDashboard().userId || ""), o.dashboard.manageAccess.setupList(o.dashboard.manageAccess.userRoles, o.currentDashboard().userRoles || ""), o.dashboard.manageAccess.setupList(o.dashboard.manageAccess.viewOnlyUserRoles, o.currentDashboard().viewOnlyUserRoles || ""), o.dashboard.manageAccess.setupList(o.dashboard.manageAccess.viewOnlyUsers, o.currentDashboard().viewOnlyUserId || ""); var e = (o.currentDashboard().selectedReports || "").split(","); _.forEach(o.reportsAndFolders(), function (o) { _.forEach(o.reports, function (o) { o.selected(e.indexOf(o.reportId.toString()) >= 0) }) }) }, o.saveDashboard = function () { if ($(".form-group").removeClass("needs-validation"), !o.dashboard.Name()) return $("#add-dash-name").closest(".form-group").addClass("needs-validation"), !1; var r = ""; _.forEach(o.reportsAndFolders(), function (e) { _.forEach(e.reports, function (e) { e.selected() && (r += (r ? "," : "") + e.reportId) }) }); var t = { id: o.dashboard.Id() || 0, name: o.dashboard.Name(), description: o.dashboard.Description(), selectedReports: r, userIdAccess: o.dashboard.manageAccess.getAsList(o.dashboard.manageAccess.users), viewOnlyUserId: o.dashboard.manageAccess.getAsList(o.dashboard.manageAccess.viewOnlyUsers), userRolesAccess: o.dashboard.manageAccess.getAsList(o.dashboard.manageAccess.userRoles), viewOnlyUserRoles: o.dashboard.manageAccess.getAsList(o.dashboard.manageAccess.viewOnlyUserRoles), adminMode: o.adminMode() }; return ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/SaveDashboard", model: JSON.stringify(t) } }).done(function (e) { e.d && (e = e.d), toastr.success("Dashboard saved successfully"), setTimeout(function () { window.location = window.location.href.split("?")[0] + "?id=" + e.id }, 500) }), !0 }, o.deleteDashboard = function () { bootbox.confirm("Are you sure you would like to Delete this Dashboard?", function (r) { r && ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/DeleteDashboard", model: JSON.stringify({ id: o.currentDashboard().id, adminMode: o.adminMode() }) } }).done(function (e) { toastr.success("Dashboard deleted successfully"), setTimeout(function () { window.location = window.location.href.split("?")[0] }, 500) }) }) }, o.reports = ko.observableArray([]); var t = 0; _.forEach(e.reports, function (r) { var a = new reportViewModel({ runReportUrl: e.runReportUrl, execReportUrl: e.execReportUrl, reportWizard: e.reportWizard, lookupListUrl: e.lookupListUrl, runReportApiUrl: e.runReportApiUrl, apiUrl: e.apiUrl, reportFilter: r.reportFilter, reportMode: "dashboard", reportSql: r.reportSql, reportId: r.reportId, reportConnect: r.connectKey, users: e.users, userRoles: e.userRoles, skipDraw: !0 }); a.x = ko.observable(r.x), a.y = ko.observable(r.y), a.width = ko.observable(r.width), a.height = ko.observable(r.height), a.panelStyle = "panel-" + (0 == t ? "default" : 1 == t ? "info" : 2 == t ? "warning" : "danger"), t = 3 == t ? 0 : t + 1, o.reports.push(a), a.LoadReport(r.reportId, !0, ""), a.showFlyFilters = ko.observable(!1), a.toggleFlyFilters = function () { a.showFlyFilters(!a.showFlyFilters()) } }), o.drawChart = function () { _.forEach(o.reports(), function (e) { e.skipDraw = !1, e.DrawChart() }) }, o.updatePosition = function (r) { r && r.id && ajaxcall({ url: e.apiUrl, noBlocking: !0, data: { method: "/ReportApi/UpdateDashboardReportPosition", model: JSON.stringify({ x: r.x, y: r.y, width: r.width, height: r.height, dashboardId: o.currentDashboard().id, reportId: parseInt(r.id) }) } }) }, o.init = function () { return $.when(ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetSavedReports", model: JSON.stringify({ adminMode: o.adminMode() }) } }), ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetFolders", model: JSON.stringify({ adminMode: o.adminMode() }) } })).done(function (e, r) { var t = []; r[0].d && (r[0] = r[0].d), e[0].d && (e[0] = e[0].d), _.forEach(r[0], function (o) { var r = _.filter(e[0], { folderId: o.Id }); t.push({ folderId: o.Id, folder: o.FolderName, reports: _.map(r, function (e) { return { reportId: e.reportId, reportName: e.reportName, reportDescription: e.reportDescription, reportType: e.reportType, selected: ko.observable(!1) } }) }) }), o.reportsAndFolders(t) }) }, o.adminMode.subscribe(function (e) { o.init() }) };